// Generated by CoffeeScript 1.12.7
(function() {
  var Field, Game, Helper, Informer, Level, app;

  Game = function() {
    this.parentGameElementTag = 'body';
    this.gameElementId = 'game';
    this.level = 1;
    this.hiScore = 0;
    this.score = 0;
    this.playerLabel = 1;
    this.compLabel = -1;
    this.standOffLabel = 'standoff';
    this.helperObj = new Helper;
    this.startNewLevel();
  };

  Game.prototype = {
    startNewLevel: function() {
      var self;
      self = this;
      if (self.levelObj) {
        self.levelObj.finalization();
        delete self.levelObj;
      }
      self.levelObj = new Level(self);
    },
    levelScreenDisplay: function(parentElementTag, level) {
      $('<div class="level_begin_label" id="levelBeginLabel">Уровень: ' + level + '</div>').appendTo(parentElementTag);
      setTimeout((function() {
        $('<div class="any_key_invitation" id="anyKeyInvitation">Нажмите любую клавишу (также можете кликнут мышкой) для старта</div>').appendTo('#levelBeginLabel');
        document.onkeypress = function() {
          document.onkeypress = void 0;
          $('#levelBeginLabel').remove();
        };
        document.onclick = function() {
          document.onkeypress = void 0;
          $('#levelBeginLabel').remove();
        };
      }), 1000);
    },
    numLevelCompute: function(winner) {
      var self;
      self = this;
      if (winner === self.playerLabel) {
        self.level += 1;
      } else if (winner === self.compLabel) {
        self.level = 1;
      }
    }
  };

  Level = function(gameObj) {
    var self;
    self = this;
    this.gameObj = gameObj;
    this.stepsCount = 0;
    this.fieldObj = new Field(this, this.gameObj);
    this.informerObj = new Informer(this.gameObj);
    this.gameObj.levelScreenDisplay('body', this.gameObj.level);
    this.stepsPlayerOn();
  };

  Level.prototype = {
    finalization: function() {
      this.fieldObj.finalization();
      delete this.fieldObj;
      this.informerObj.finalization();
      delete this.informerObj;
    },
    stepsPlayerOn: function() {
      var fieldElem, self;
      self = this;
      fieldElem = document.getElementById(self.fieldObj.fieldElementId);
      fieldElem.onclick = function(e) {
        var h_coord, resultLevel, target, w_coord;
        e = e || event;
        target = e.target || e.srcElement;
        w_coord = e.target.attributes['data-w'].value;
        h_coord = e.target.attributes['data-h'].value;
        resultLevel = void 0;
        switch (self.fieldObj.fieldArr[w_coord][h_coord]) {
          case 0:
            self.fieldObj.changeFieldArr(w_coord, h_coord, self.gameObj.playerLabel);
            self.stepsCount++;
            self.fieldObj.cellsRender();
            resultLevel = self.checkLevelEnd(self.gameObj.playerLabel, self.fieldObj.fieldArr);
            if (resultLevel) {
              self.gameObj.numLevelCompute(self.checkLevelEnd(self.gameObj.playerLabel, self.fieldObj.fieldArr));
              self.sendFimalMessage(resultLevel);
              self.scoreCalculated(resultLevel);
              self.stopLevel();
            } else {
              self.compStep();
            }
            break;
          case 1:
            self.informerObj.refreshMessage('В эту клетку вы уже ходили', 'red');
            break;
          case -1:
            self.informerObj.refreshMessage('Эта клетка уже занята', 'red');
            break;
          default:
            break;
        }
      };
    },
    compStep: function() {
      var h_coord, i, resultLevel, self, w_coord;
      self = this;
      w_coord = void 0;
      h_coord = void 0;
      resultLevel = void 0;
      i = 0;
      while (i < 1000) {
        w_coord = self.gameObj.helperObj.randomIntFromZero(3);
        h_coord = self.gameObj.helperObj.randomIntFromZero(3);
        if (self.fieldObj.fieldArr[w_coord][h_coord] === 0) {
          self.fieldObj.changeFieldArr(w_coord, h_coord, self.gameObj.compLabel);
          self.stepsCount++;
          self.fieldObj.cellsRender(self.fieldElementId, self.fieldArr);
          resultLevel = self.checkLevelEnd(self.gameObj.compLabel, self.fieldObj.fieldArr);
          if (resultLevel) {
            self.gameObj.numLevelCompute(self.checkLevelEnd(self.gameObj.compLabel, self.fieldObj.fieldArr));
            self.sendFimalMessage(resultLevel);
            self.scoreCalculated(resultLevel);
            self.stopLevel();
          }
          break;
        }
        i++;
      }
    },
    scoreCalculated: function(resultLevel) {
      var self;
      self = this;
      if (resultLevel === self.gameObj.compLabel) {
        if (self.gameObj.score > self.gameObj.hiScore) {
          self.gameObj.hiScore = self.gameObj.score;
        }
        self.gameObj.score = 0;
      } else if (resultLevel === self.gameObj.playerLabel) {
        self.gameObj.score += 500;
      } else if (resultLevel === self.gameObj.standOffLabel) {
        self.gameObj.score += 100;
      }
    },
    sendFimalMessage: function(resultLevel) {
      var self;
      self = this;
      if (resultLevel === self.gameObj.compLabel) {
        self.informerObj.refreshMessage('Вы проиграли', 'red');
      } else if (resultLevel === self.gameObj.playerLabel) {
        self.informerObj.refreshMessage('Вы выиграли!', 'lime');
      } else if (resultLevel === self.gameObj.standOffLabel) {
        self.informerObj.refreshMessage('Ничья, переиграем уровень заново', 'orange');
      }
    },
    stopLevel: function() {
      var fieldElem, self;
      self = this;
      fieldElem = document.getElementById(self.fieldObj.fieldElementId);
      fieldElem.onclick = void 0;
      setTimeout((function() {
        self.gameObj.startNewLevel();
      }), 2000);
    },
    checkLevelEnd: function(label, fieldArr) {
      var result;
      result = void 0;
      if (this.checkWin(label, fieldArr)) {
        result = label;
      } else if (this.checkStandoff()) {
        result = this.gameObj.standOffLabel;
      }
      return result;
    },
    checkStandoff: function() {
      if (this.stepsCount >= 9) {
        return this.gameObj.standOffLabel;
      }
    },
    checkWin: function(label, fieldArr) {
      var h_coord, w_coord, winnerMark;
      winnerMark = void 0;
      if (fieldArr[0][0] === label && fieldArr[1][1] === label && fieldArr[2][2] === label) {
        winnerMark = label;
      }
      if (fieldArr[0][2] === label && fieldArr[1][1] === label && fieldArr[2][0] === label) {
        winnerMark = label;
      }
      h_coord = 0;
      while (h_coord <= 2) {
        if (fieldArr[h_coord][0] === label && fieldArr[h_coord][1] === label && fieldArr[h_coord][2] === label) {
          winnerMark = label;
        }
        h_coord++;
      }
      w_coord = 0;
      while (w_coord <= 2) {
        if (fieldArr[0][w_coord] === label && fieldArr[1][w_coord] === label && fieldArr[2][w_coord] === label) {
          winnerMark = label;
        }
        w_coord++;
      }
      return winnerMark;
    }
  };

  Helper = function() {
    this.randomIntFromZero = function(maxExclusive) {
      return Math.floor(Math.random() * maxExclusive);
    };
  };

  Informer = function(gameObj) {
    this.messageCount = 0;
    this.informerElementId = 'informer';
    this.hiScoreElementId = 'hiScore';
    this.messagerElementId = 'messager';
    this.levelValueId = 'levelValue';
    this.scoreValueId = 'scoreValue';
    this.hiScoreValueId = 'hiScoreValue';
    this.gameObj = gameObj;
    this.create(this.gameObj.gameElementId, this.informerElementId, this.levelValueId, this.scoreValueId);
    this.refreshHiScore(this.gameObj.hiScore);
    this.refreshMessage('Игра началась. Ваш ход', 'orange');
    this.refreshInfo(this.scoreValueId, this.levelValueId, {
      'score': this.gameObj.score,
      'level': this.gameObj.level
    });
  };

  Informer.prototype = {
    finalization: function(hiScore) {
      var hiScoreElem, informerElem, messagerElem;
      informerElem = document.getElementById(this.informerElementId);
      hiScoreElem = document.getElementById(this.hiScoreElementId);
      messagerElem = document.getElementById(this.messagerElementId);
      informerElem.parentNode.removeChild(informerElem);
      hiScoreElem.parentNode.removeChild(hiScoreElem);
      messagerElem.parentNode.removeChild(messagerElem);
    },
    create: function(gameElementId, informerElementId, levelValueId, scoreValueId) {
      $('<table class="informer" id="' + informerElementId + '">         <tr><td class="label level_label">уровень: </td><td class="value level_value" id="' + levelValueId + '"></td></tr>         <tr><td class="label score_label">счёт: </td><td class="value score_value" id="' + scoreValueId + '"></td></tr>       </table>').appendTo('#' + gameElementId);
      $('<div class="messager" id="messager"></div>').appendTo('#' + this.gameObj.gameElementId);
      $('<div class="hi_score" id="hiScore">Рекордный счёт: <span class="hi_score_value" id="hiScoreValue"></div>').appendTo(this.gameObj.parentGameElementTag);
    },
    refreshHiScore: function(hiScore) {
      document.getElementById(this.hiScoreValueId).innerHTML = hiScore;
    },
    refreshMessage: function(message, textColor) {
      $('<div class="message_unit" id="messageUnit_' + this.messageCount + '" >' + message + '</div>').css({
        color: textColor
      }).appendTo('#messager');
      setTimeout((function() {
        $('#messager div:first-child').remove();
      }), 3000);
      this.messageCount++;
    },
    refreshInfo: function(scoreValueId, levelValueId, infoArr) {
      document.getElementById(scoreValueId).innerHTML = infoArr['score'];
      document.getElementById(levelValueId).innerHTML = infoArr['level'];
    }
  };

  Field = function(levelObj, gameObj) {
    var self;
    self = this;
    this.gameObj = gameObj;
    this.levelObj = levelObj;
    this.fieldArr = [];
    this.fieldElementId = 'field';
    this.cellSize = 100;
    this.width = 3;
    this.height = 3;
    this.fillFieldArr();
    this.fieldElementCreate();
    this.cellsRender();
  };

  Field.prototype = {
    finalization: function() {
      var fieldElem;
      fieldElem = document.getElementById(this.fieldElementId);
      fieldElem.parentNode.removeChild(fieldElem);
    },
    fillFieldArr: function() {
      var h_coord, w_coord;
      w_coord = 0;
      while (w_coord < this.width) {
        this.fieldArr[w_coord] = new Array;
        h_coord = 0;
        while (h_coord < this.height) {
          this.fieldArr[w_coord][h_coord] = 0;
          h_coord++;
        }
        w_coord++;
      }
    },
    changeFieldArr: function(w_coord, h_coord, value) {
      this.fieldArr[w_coord][h_coord] = value;
    },
    fieldElementCreate: function() {
      var gameElement;
      gameElement = $('#' + this.gameObj.gameElementId);
      $('<div class="field" id="field"></div>').css({
        width: this.cellSize * 3 + 'px',
        height: this.cellSize * 3 + 'px'
      }).appendTo(gameElement);
    },
    cellsRender: function() {
      var bgImage, h_coord, w_coord;
      bgImage = void 0;
      document.getElementById(this.fieldElementId).innerHTML = '';
      w_coord = 0;
      while (w_coord < this.width) {
        h_coord = 0;
        while (h_coord < this.height) {
          bgImage = '';
          if (this.fieldArr[w_coord][h_coord] === 0) {

          } else if (this.fieldArr[w_coord][h_coord] === 1) {
            bgImage = '/img/cross.png';
          } else if (this.fieldArr[w_coord][h_coord] === -1) {
            bgImage = '/img/zero.png';
          }
          $('<div class="cell" id="Cell_' + w_coord + '_' + h_coord + '" data-w="' + w_coord + '" data-h="' + h_coord + '" ></div>').css({
            background: 'url("' + bgImage + '") left top no-repeat',
            backgroundSize: 'cover',
            width: this.cellSize - 1 + 'px',
            height: this.cellSize - 1 + 'px',
            left: w_coord * this.cellSize + 'px',
            top: h_coord * this.cellSize + 'px'
          }).appendTo('#' + this.fieldElementId);
          h_coord++;
        }
        w_coord++;
      }
    }
  };

  app = new Game;

}).call(this);

//# sourceMappingURL=app.js.map
